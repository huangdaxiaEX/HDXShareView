//: #### Other pages
//: * [Demo for `swiftgen strings`](Colors-Demo)
//: * [Demo for `swiftgen images`](Images-Demo)
//: * [Demo for `swiftgen storyboards`](Storyboards-Demo)
//: * [Demo for `swiftgen colors`](Colors-Demo)
//: * Demo for `swiftgen fonts`

//: #### Example of code generated by swiftgen-fonts

import UIKit.UIFont

protocol FontConvertible {
    func font(size: CGFloat) -> UIFont!
}

extension FontConvertible where Self: RawRepresentable, Self.RawValue == String {
    func font(size: CGFloat) -> UIFont! {
        return UIFont(font: self, size: size)
    }
}

extension UIFont {
    convenience init!<FontType: FontConvertible where FontType: RawRepresentable, FontType.RawValue == String>(font: FontType, size: CGFloat) {
        self.init(name: font.rawValue, size: size)
    }
}

struct FontFamily {
    enum Helvetica: String, FontConvertible {
        case Regular = "Helvetica"
        case Bold = "Helvetica-Bold"
    }
    enum HelveticaNeue: String, FontConvertible {
        case Regular = "HelveticaNeue"
        case Bold = "HelveticaNeue-Bold"
    }
}

//: #### Usage Example
// Using the UIFont constructorâ€¦
let helvetica = UIFont(font: FontFamily.Helvetica.Regular, size: 20.0)
// Or using the enum value and its `font` method
let helveticaNeue = FontFamily.HelveticaNeue.Regular.font(20.0)

let helveticaBoldBig = FontFamily.Helvetica.Bold.font(100.0)
let helveticaNeueBoldSmall = UIFont(font: FontFamily.HelveticaNeue.Bold, size: 8.0)
